# Global #

stages:
  - Platform Tests
  - Analysis

variables:
  GIT_SUBMODULE_STRATEGY: recursive

# Platform Tests #

.platform_unix_template: &platform_unix_template
  stage: Platform Tests
  tags:
    - container
    - linux
    - amd64
  script:
    - cmake . -B build -G Ninja
    - cmake --build build

.platform_windows_template: &platform_windows_template
  stage: Platform Tests
  image: stabletec/build-core:windows-ltsc2022
  tags:
    - container
    - windows
    - ltsc2022
    - amd64
  script:
    - cmake . -B build -G Ninja
    - cmake --build build

.platform_msys_template: &platform_msys_template
  stage: Platform Tests
  image: stabletec/build-core:msys-ltsc2022-${MSYS_SUBSYSTEM}
  tags:
    - container
    - windows
    - ltsc2022
    - amd64
  script:
    # set the directory bash will start in
    - $env:HOME="$(cygpath -u $(pwd))"
    - bash.exe -lc "cmake . -B build -G Ninja"
    - bash.exe -lc 'cmake --build build'

.platform_macos_template: &platform_macos_template
  stage: Platform Tests
  tags:
    - macos
  script:
    - cmake . -B build -G Ninja
    - cmake --build build

Fedora/GCC:
  image: stabletec/build-core:fedora
  variables:
    CC: gcc
    CXX: g++
  <<: *platform_unix_template

Fedora/Clang:
  image: stabletec/build-core:fedora
  variables:
    CC: clang
    CXX: clang++
  <<: *platform_unix_template

Debian/GCC:
  image: stabletec/build-core:debian
  variables:
    CC: gcc
    CXX: g++
  <<: *platform_unix_template

Debian/Clang:
  image: stabletec/build-core:debian
  variables:
    CC: clang
    CXX: clang++
  <<: *platform_unix_template

Ubuntu/GCC:
  image: stabletec/build-core:ubuntu
  variables:
    CC: gcc
    CXX: g++
  <<: *platform_unix_template

Ubuntu/Clang:
  image: stabletec/build-core:ubuntu
  variables:
    CC: clang
    CXX: clang++
  <<: *platform_unix_template

openSUSE/GCC:
  image: stabletec/build-core:opensuse
  variables:
    CC: gcc
    CXX: g++
  <<: *platform_unix_template

openSUSE/Clang:
  image: stabletec/build-core:opensuse
  variables:
    CC: clang
    CXX: clang++
  <<: *platform_unix_template

Windows/MSVC:
  <<: *platform_windows_template

Windows/Clang-cl:
  variables:
    CC: clang-cl
    CXX: clang-cl
  <<: *platform_windows_template

Windows/Clang:
  variables:
    CC: clang
    CXX: clang
  <<: *platform_windows_template

MSYS/GCC:
  parallel:
    matrix:
      - MSYS_SUBSYSTEM: [ucrt64, mingw64]
  <<: *platform_windows_template

MSYS/Clang:
  parallel:
    matrix:
      - MSYS_SUBSYSTEM: [ucrt64, mingw64, clang64]
  <<: *platform_windows_template

macOS/AppleClang:
  variables:
    CC: clang
    CXX: clang++
  <<: *platform_macos_template

macOS/Clang:
  variables:
    CC: clang
    CXX: clang++
  <<: *platform_macos_template

# Analysis #

.analysis_template: &analysis_template
  stage: Analysis
  image: stabletec/build-foe:fedora
  tags:
    - container
    - linux
  script:
    - cmake . -B build -G Ninja
    - cmake --build build

Static Analysis:
  variables:
    CMAKE_OPTIONS: -DCLANG_TIDY=ON -DCPPCHECK=ON
    CC: clang
    CXX: clang++
  <<: *analysis_template
