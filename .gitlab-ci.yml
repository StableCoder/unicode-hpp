# Global #

stages:
  - Platform Tests
  - Analysis

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  CTEST_OUTPUT_ON_FAILURE: '1'

# Platform Tests #

.platform_unix_template: &platform_unix_template
  stage: Platform Tests
  tags:
    - docker-linux
  script:
    - mkdir build && cd build
    - cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release
    - ninja

.platform_windows_template: &platform_windows_template
  stage: Platform Tests
  tags:
    - docker-windows
  script:
    - echo 'try {'  | out-file -encoding utf8 build.ps1
    - echo 'cd ..; mkdir workdir-cpy' | out-file -encoding utf8 -append build.ps1
    - echo 'Copy-Item C:\workdir\* -Destination C:\workdir-cpy -Recurse' | out-file -encoding utf8 -append build.ps1
    - echo 'cd workdir-cpy' | out-file -encoding utf8 -append build.ps1
    - echo 'mkdir build; cd build' | out-file -encoding utf8 -append build.ps1
    - echo "cmake .. -GNinja" | out-file -encoding utf8 -append build.ps1
    - echo 'if(-not $?){throw}' | out-file -encoding utf8 -append build.ps1
    - echo 'ninja' | out-file -encoding utf8 -append build.ps1
    - echo 'if(-not $?){throw}' | out-file -encoding utf8 -append build.ps1
    - echo '} catch { exit 1 }' | out-file -encoding utf8 -append build.ps1
    - docker run --rm -v ${pwd}:C:\workdir $env:IMAGE C:\workdir\build.ps1

Fedora/GCC:
  image: stabletec/build-core:fedora-gcc
  <<: *platform_unix_template

Fedora/Clang:
  image: stabletec/build-core:fedora-clang
  <<: *platform_unix_template

Debian/GCC:
  image: stabletec/build-core:debian-gcc
  <<: *platform_unix_template

Debian/Clang:
  image: stabletec/build-core:debian-clang
  <<: *platform_unix_template

Ubuntu/GCC:
  image: stabletec/build-core:ubuntu-gcc
  <<: *platform_unix_template

Ubuntu/Clang:
  image: stabletec/build-core:ubuntu-clang
  <<: *platform_unix_template

openSUSE/GCC:
  image: stabletec/build-core:opensuse-gcc
  <<: *platform_unix_template

openSUSE/Clang:
  image: stabletec/build-core:opensuse-clang
  <<: *platform_unix_template

Windows/MSVC:
  variables:
    IMAGE: stabletec/build-core:windows-msvc
  <<: *platform_windows_template

Windows/Clang-cl:
  variables:
    IMAGE: stabletec/build-core:windows-clang-cl
  <<: *platform_windows_template

# Analysis #

.analysis_template: &analysis_template
  stage: Analysis
  image: stabletec/build-foe:fedora-clang
  allow_failure: true
  tags:
    - docker-linux
  script:
    - mkdir build && cd build
    - cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON -DBUILD_EXAMPLES=ON -DNO_VULKAN_DEVICE=ON -DBUILD_WINDOW_TESTS=OFF ${CMAKE_OPTIONS}
    - ninja

Static Analysis:
  variables:
    CMAKE_OPTIONS: -DCLANG_TIDY=ON -DCPPCHECK=ON -DIWYU=ON
  <<: *analysis_template
